## 1. Teste que falhou

| ID/Descrição do Teste | Resultado |
|------------------------|-----------|
| **Usuário deve atualizar telefone com campo vazio** | **Falhou** |

Esse é o único teste listado no log, portanto é o único que falhou.

---

## 2. Motivo da falha

### Erro relatado

```
expect(locator).toContainText(expected) failed
Locator: locator('//*[@id="phone-error"]')
Expected substring: "Phone is required."
Timeout: 5000ms
Error: element(s) not found
```

### Interpretação

1. **O Playwright tentou localizar o elemento** com a expressão XPath `//*[@id="phone-error"]`.
2. **Não encontrou nenhum elemento** que correspondesse a essa expressão dentro do tempo limite de 5 s.
3. Como o elemento não existe, a expectativa `toContainText` falhou (não havia texto para comparar).

### Por que o elemento pode não ter sido encontrado?

| Possível causa | Indicação | Como verificar |
|----------------|-----------|----------------|
| **Id incorreto ou mudou** | O atributo `id="phone-error"` pode não existir na página atual. | Inspecione o DOM no momento em que o teste roda (use DevTools, `page.screenshot()`, ou o trace do Playwright). |
| **Elemento ainda não foi renderizado** | A mensagem de erro só aparece após uma ação (por ex.: enviar o formulário). | Verifique se a ação que dispara a validação foi realmente executada e se há alguma animação/espera pendente. |
| **Elemento está dentro de um iframe ou Shadow DOM** | Playwright não procura por padrão dentro de iframes/shadow roots. | Se for esse o caso, use `page.frameLocator(...)` ou `page.locator('::shadow', ...)`. |
| **Erro de tempo** | 5 s pode ser insuficiente para a página carregar ou para o script de validação executar. | Aumente o timeout ou adicione `await page.waitForLoadState('networkidle')` antes de interagir. |
| **O teste não disparou a validação** | O campo pode ter sido limpo mas a submissão não ocorreu. | Confirme se o botão “Salvar/Atualizar” foi clicado e se há alguma validação assíncrona que precisa ser aguarda. |

---

## 3. Sugestões para corrigir o erro

### 3.1. Confirme o seletor

1. Abra a aplicação manualmente e localize a mensagem de erro que aparece quando o campo de telefone é deixado vazio.
2. No DevTools, verifique o `id` real e a estrutura do elemento. Se o `id` for diferente, atualize o XPath/seleção no teste:
   ```js
   const errorLocator = page.locator('#phone-error'); // ou outro seletor
   ```

### 3.2. Assegure que a validação é disparada

- **Simule a submissão**:  
  ```js
  await page.fill('#phone', ''); // deixa vazio
  await page.click('button[type="submit"]'); // ou o botão “Atualizar”
  ```
- **Use `await page.waitForSelector`** para garantir que o elemento de erro aparece:
  ```js
  await page.waitForSelector('#phone-error', { state: 'visible', timeout: 8000 });
  ```

### 3.3. Ajuste o tempo de espera (timeout)

- Se a aplicação demora a exibir o erro, aumente o timeout do `waitForSelector` e da própria expectativa:
  ```js
  await expect(page.locator('#phone-error')).toContainText('Phone is required.', { timeout: 12000 });
  ```

### 3.4. Verifique possíveis iframes ou Shadow DOM

- Se o elemento estiver dentro de um iframe:
  ```js
  const frame = page.frame({ name: 'frameName' }); // ou use regex no URL
  const error = frame.locator('#phone-error');
  await expect(error).toContainText('Phone is required.');
  ```
- Se estiver em Shadow DOM:
  ```js
  const error = page.locator('#parent >> #phone-error');
  ```

### 3.5. Use o **Trace** ou **Screenshots** para debug

- Ative o trace no início do teste:
  ```js
  await playwright.tracing.start({ screenshots: true, snapshots: true });
  ```
- Depois do erro, visualize o trace (`npx playwright show-trace trace.zip`) para ver exatamente onde o elemento não apareceu.

### 3.6. Garantir que a página esteja totalmente carregada

```js
await page.waitForLoadState('networkidle'); // aguarda fim de chamadas de rede
```

### 3.7. Atualize a mensagem esperada se o texto mudar

Se a aplicação usa mensagens em português ou tem variações de acentuação:
```js
await expect(page.locator('#phone-error')).toContainText(/Telefone é obrigatório\./i);
```

---

## 4. Código de exemplo corrigido

```js
test('Usuário deve atualizar telefone com campo vazio', async ({ page }) => {
  // 1. Navega até a página de atualização
  await page.goto('/user/profile');

  // 2. Aguarda a página carregar
  await page.waitForLoadState('networkidle');

  // 3. Limpa o campo de telefone
  await page.fill('#phone', '');

  // 4. Tenta salvar (submissão)
  await page.click('button#save-profile');

  // 5. Espera que o erro apareça
  const errorLocator = page.locator('#phone-error'); // ajuste o seletor se necessário
  await expect(errorLocator).toBeVisible({ timeout: 8000 });

  // 6. Verifica o conteúdo
  await expect(errorLocator).toContainText('Phone is required.', { timeout: 8000 });
});
```

---

## 5. Checklist rápido para evitar falhas semelhantes

1. **Verifique se o seletor está correto** antes de rodar o teste.
2. **Garanta que a ação de disparo** (ex.: clique no botão) realmente ocorra.
3. **Aguarde elementos visíveis** com `waitForSelector` ou `toBeVisible` antes de fazer asserções.
4. **Use timeouts mais altos** quando a UI depende de animações ou chamadas assíncronas.
5. **Habilite traces ou screenshots** nos testes que falham frequentemente para diagnosticar rapidamente.

Com essas correções e práticas, o teste “Usuário deve atualizar telefone com campo vazio” deve passar de forma confiável.