**Resumo dos testes que falharam**

| # | Teste | Status | Motivo da falha | Sugestão de correção |
|---|-------|--------|-----------------|----------------------|
| 1 | **Login válido falhou** | ❌ | O seletor `#leftPanel > p` não encontrou nenhum elemento dentro do tempo limite de 5 s, e o texto esperado “Welcome” não foi encontrado. | 1. Verificar se o seletor realmente corresponde ao elemento que aparece após o login. <br>2. Garantir que o login está concluído antes de verificar o texto (usar `await page.waitForNavigation()` ou `await expect(locator).toBeVisible()` antes da asserção). <br>3. Se o elemento pode aparecer dinamicamente, usar um seletor mais robusto (ex.: `text=Welcome`) ou aumentar o timeout. |
| 2 | **Usuário deve atualizar telefone com campo vazio falhou** | ❌ | O teste excedeu o limite de 10 s sem produzir um erro específico; provavelmente ele ficou preso esperando por algum evento que nunca ocorreu (ex.: confirmação de erro, mensagem de validação, redirecionamento). | 1. Certificar que o fluxo de “atualizar telefone” realmente dispara uma resposta (ex.: mensagem de erro “O campo não pode ficar vazio”). <br>2. Usar `await expect(page.locator('.error-msg')).toBeVisible({ timeout: 8000 })` para aguardar a mensagem. <br>3. Se o fluxo envolver redirecionamento, usar `await page.waitForNavigation()` ou `await page.waitForURL()`. <br>4. Revisar se o elemento de entrada de telefone recebe foco corretamente e se o clique em “Salvar” realmente envia a requisição. |

---

## 1. Teste: **Login válido falhou**

### Por que falhou?
- **Elemento não encontrado**: O Playwright tentou localizar `#leftPanel > p` mas não encontrou nada dentro de 5 s. Isso pode acontecer se:
  - O seletor está incorreto (ex.: a estrutura DOM mudou).
  - O elemento ainda não está renderizado quando a asserção é feita (o login ainda não terminou).
  - O login falhou silenciosamente e a página não mostra o painel de boas‑vindas.

- **Texto esperado não encontrado**: Mesmo que o elemento fosse encontrado, o texto “Welcome” não estava presente, indicando que o fluxo de login não concluiu corretamente.

### Como corrigir?

| Etapa | Ação | Por quê |
|-------|------|---------|
| **a.** | **Verificar a existência do seletor** | Abra a aplicação manualmente, use o DevTools e confirme se `#leftPanel > p` realmente aponta para o parágrafo que contém “Welcome”. Se o layout mudou, atualize o seletor para algo estável, como `text=Welcome` ou `#leftPanel p`. |
| **b.** | **Esperar a conclusão do login** | Depois de enviar as credenciais, aguarde a navegação ou um elemento de “loading” desaparecer: `await page.waitForNavigation();` ou `await expect(page.locator('#loading')).toBeHidden();`. |
| **c.** | **Usar um timeout maior se a página for lenta** | Se a rede ou o backend estiver lento, aumente o timeout: `await expect(locator).toContainText('Welcome', { timeout: 12000 });`. |
| **d.** | **Adicionar logs de debugging** | Imprima o HTML do `#leftPanel` antes da asserção: `console.log(await page.locator('#leftPanel').innerHTML());` para ver se o elemento está presente e qual seu conteúdo. |
| **e.** | **Verificar logs do servidor** | Se o login depende de APIs externas, cheque os logs do backend para garantir que o usuário realmente está autenticado e que o token está sendo emitido. |

---

## 2. Teste: **Usuário deve atualizar telefone com campo vazio falhou**

### Por que falhou?
- O teste excedeu o timeout de 10 s sem lançar uma exceção específica. Isso indica que:
  1. **Nenhum evento de erro foi disparado**: A aplicação pode não ter mostrado a mensagem de validação ao enviar o telefone vazio.
  2. **O fluxo de submissão pode estar preso**: O botão “Salvar” pode não estar funcionando (ex.: desabilitado ou não conectado a um manipulador).
  3. **Esperança de redirecionamento não aconteceu**: Se o teste esperava voltar à lista de usuários, esse redirecionamento não ocorreu.
  4. **O campo de telefone pode não ter sido encontrado**: O seletor usado para limpar ou deixar vazio o campo pode estar incorreto.

### Como corrigir?

| Etapa | Ação | Por quê |
|-------|------|---------|
| **a.** | **Confirmar o seletor do campo de telefone** | Use `page.locator('input[name="phone"]')` ou outro atributo confiável. Teste manualmente que o campo pode ser limpo: `await page.fill('input[name="phone"]', '');`. |
| **b.** | **Garantir que o botão “Salvar” é clicável** | `await page.waitForSelector('button:has-text("Salvar")', { state: 'visible', timeout: 5000 });` e depois `await page.click('button:has-text("Salvar")');`. Se o botão está desabilitado, verifique se há validação de formulário que impede o clique. |
| **c.** | **Aguardar a mensagem de validação** | Se a UI mostra algo como “O campo telefone não pode ficar vazio”, aguarde: `await expect(page.locator('.error')).toHaveText(/telefone/i, { timeout: 8000 });`. |
| **d.** | **Adicionar timeout mais específico** | Em vez de esperar o timeout total do teste, use timeouts menores em cada espera: `await page.waitForTimeout(2000);` depois de cada ação. |
| **e.** | **Revisar a lógica de validação** | Se a validação ocorre no backend, confirme que a requisição POST realmente está sendo enviada com o corpo vazio. Use o DevTools Network ou o interceptador `page.waitForResponse` para confirmar. |
| **f.** | **Adicionar logs** | Exemplo: `console.log('Telefone enviado:', await page.inputValue('input[name="phone"]'));` e `console.log('Resposta do servidor:', await page.waitForResponse('/api/updatePhone').then(r => r.json()));`. |

---

## Observações Gerais

- **Logs e Screenshot**: Sempre que um teste falhar, capture uma screenshot (`await page.screenshot({ path: 'error.png' });`) e registre o estado da página (`await page.content();`). Isso facilita a identificação de alterações inesperadas na UI.
- **Seletores Resilientes**: Prefira seletores baseados em textos visíveis (`text=Welcome`) ou atributos estáveis (`data-testid`) em vez de seletores profundos como `#leftPanel > p`, que quebram com pequenas mudanças na estrutura DOM.
- **Timeouts**: Ajustar os timeouts ajuda a diferenciar entre falhas de lógica e falhas de desempenho. Um timeout curto (`1000ms`) pode gerar falsos negativos; um tempo muito longo pode ocultar problemas de regressão.

Com essas correções e práticas, os testes ficarão mais robustos e a manutenção será mais simples. Boa sorte!